; --------------------------------------------
; Title:   				A File Driver to work with Entropy's FAT 16 based File System
; Author:  				Liraal
; Editor:				LukeW4lker
; Date of creation:    	2012-10-31
; --------------------------------------------

;=============================================
;VARIABLES
;=============================================
:fd_drive_cur 	dat 0x0
:fd_working_dir	dat 0x0		;later the fd is going to read these from the end of FAT -
:fd_FAT_offset	dat 0xC8	;-														 -
:fd_FAT_number	dat 0x3		;-														 -
:fd_root_offset	dat 0xCB	;---------------------------------------------------------
:fd_FAT			dat 0x0
:fd_dir_entry		dat 0x0, 0x0, 0x0, 0x0 
					dat	0x0, 0x0, 0x0, 0x0
					dat 0x0, 0x0, 0x0, 0x0
					dat 0x0, 0x0, 0x0, 0x0
:fd_dir_entry_end
:fd_drive_table	dat 0x0
:fd_drive_cap		dat 0x8
:fd_boot_drive	dat 0x0
:fd_file_table	dat 0x0		;File table - table containing data on all open files. format is as follows:
;words 1-16 - file DTE.
;17. word - process which has the file opened, 0xFFFF if opened read-only; 
;18. word - file address; 
;19. word - currently opened sector of file
:fd_working_dirs .reserve 16; 16 comes from the number of processes supported.
;=============================================
;ROUTINES
;=============================================

;---------------------------------------------
;I/O
;---------------------------------------------

:fd_load_drive	;loads drive FAT table into memory

:fd_unload_drive	;unloads drive FAT

:fd_change_drive	;A - drive number from 0 to [fd_drive_cap]
set A, push
mul A, 0x2
add A, [fd_drive_table]
set [fd_drive_cur], [A]
add A, 0x1
set [fd_FAT], [A]
set A, pop
set pc, pop

:fd_write_sector		;A - sector number, C - location in memory
set push, Z
set Z, 3
set pc, fd_load_sector_start

:fd_load_sector		;A - sector number, C - location in memory
set push, Z
set Z, 2
:fd_load_sector_start
set push, A
set push, B
set push, C
set push, X
set push, Y
set X, A
set Y, C
set A, Z
hwi [fd_drive_cur]
:fd_load_sector_loop_b
set A, 0
hwi [fd_drive_cur]
ife B, 3
set pc, fd_load_sector_loop_b
set Y, pop
set X, pop
set C, pop
set B, pop
set A, pop
set Z, pop
set pc, pop

;---------------------------------------------
;FAT ACCESS 
;---------------------------------------------

:fd_load_FAT
ifn [fd_FAT], 0x0
	set pc, pop
set push, A
set push, B
set push, C
set A, [fd_FAT_number]
set B, A
shl A, 9
jsr mm_request_memory
set C, A
set [fd_FAT], C
set A, [fd_FAT_offset]
add B, A
:.loop
jsr fd_load_sector
add C, 0x200
add A, 0x1
ifl A, B
	set pc, .loop
set C, pop
set B, pop
set A, pop
set pc, pop

:fd_update_FAT
ife [fd_FAT], 0x0
	set pc, pop
set push, A
set push, C
set A, [fd_FAT_offset]
set C, [fd_FAT]
:.loop
jsr fd_write_sector
add C, 0x200
add A, 0x1
ifl A, [fd_root_offset]
	set pc, .loop
set C, pop
set A, pop
set pc, pop

:fd_get_FAT_entry
set push, B
set B, [fd_FAT]
add B, A
set A, [B]
set B, pop
set pc, pop

:fd_free_FAT
ife [fd_FAT], 0x0
	set pc, pop
set push, A
set A, [fd_FAT]
jsr mm_free_memory
set [fd_FAT], 0x0
set A, pop
set pc, pop

:fd_get_free_sector	;A - a free sector or 0xFFFF if none
set push, X
set push, Y
set push, Z
set Y, 0x59F
sub Y, [fd_root_offset]
ife [fd_FAT], 0x0
	dat 0x0 ;error handler here
set Z, [fd_FAT]
add Z, 0x1FF
set A, [Z]
add A, [fd_FAT]
 :fd_get_free_sector_loop
 ife [A], 0x0
	set pc, fd_get_free_sector_end
 add A, 0x1
 ifg A, Y
	jsr fd_get_free_sector_bound
 ifn X, 0x2
	set pc, fd_get_free_sector_loop
 sub A, [fd_FAT]
 set [Z], A
 set Z, pop
 set Y, pop
 set X, pop
 set A, 0xFFFF
 set pc, pop
 :fd_get_free_sector_end
 sub A, [fd_FAT]
 set [Z], A
 set Z, pop
 set Y, pop
 set X, pop
 set pc, pop
 
:fd_get_free_sector_bound
set A, [fd_FAT]
add X, 0x1 
set pc, pop

;---------------------------------------------
;FILE ACCESS
;---------------------------------------------

:fd_create_file	;A - file length
ife A, 0x0
	set pc, pop
set push, B
set push, C
set push, I
set push, J
jsr fd_get_free_sector
add A, [fd_FAT]
set [A], 0xFFFF
sub A, [fd_FAT]
set B, A
set C, 0x0
set I, 0x0
set J, A
sub J, 0x1
ife J, 0x0
 set pc, fd_create_file_end
	:fd_create_file_loop
	jsr fd_get_free_sector
	ife C, 0x0
		set C, A
	ife A, 0xFFFF
		dat 0x0	;not enough space. how about an error handler?
	add A, [fd_FAT]
	set [A], B
	sub A, [fd_FAT]
	set B, A
	add I, 0x1
	ifn I, J
		set pc, fd_create_file_loop
add A, [fd_FAT]
set [A], 0xFFFF
set A, C
:fd_create_file_end
jsr fd_update_FAT
set J, pop
set I, pop
set C, pop
set B, pop
set pc, pop	

:fd_delete_file	;A - starting cluster

:fd_write_file_sector ;A - file starting cluster, B - sector number in file A, C - location in memory to read from
jsr fd_get_file_sector
jsr fd_write_sector
set pc, pop

:fd_load_file_sector	;A - file starting cluster, B - sector number in file A, C - location in memory to read to
jsr fd_get_file_sector
jsr fd_load_sector
set pc, pop

:fd_get_file_sector
set push, I
set push, C
set I, 0x0
:.loop
set C, A
jsr fd_get_FAT_entry
add I, 0x1
ifn I, B
	set pc, .loop
set C, pop
set I, pop
set pc, pop

:fd_get_file_length	;args: A - starting cluster, output A - length
set push, I
set I, 0x0
:.loop
add I, 0x1
jsr fd_get_FAT_entry
ifn A, 0xFFFF
	ifl I, 0x5A0
	set pc, .loop
set A, I
set I, pop
set pc, pop

:fd_load_file_pop_return_error	;in case of not enough memory to load a file
set A, pop
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set A, 0x0
set pc, pop



:fd_load_prog ; Load program A into memory. Will allocate 16 extra words of space.
;The same as fd_load_file for now.

:fd_load_file	;args: A - starting cluster of the file to load. output: A - address of loaded file
set push, B
set push, C
set push, I
set push, X
set push, Y
set push, A
jsr fd_get_file_length
mul A, 0x200
jsr mm_request_memory
ife a, 0x0	;error detection
    set pc, fd_load_file_pop_return_error
set X, A
set Y, A
set A, pop
set I, 0x0


:.loop
add I, 0x1
set B, 0x1
set C, X
add A, [fd_root_offset]
jsr fd_load_sector
add X, 0x200
sub A, [fd_root_offset]
set B, A
jsr fd_get_FAT_entry
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop

set A, Y
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set pc, pop

:fd_edit_file	;args: A - starting cluster of the file to edit; B - address in memory to write from
set push, A
set push, B
set push, C
set push, I
set push, X
set I, 0x0

:.loop
add I, 0x1
set B, 0x1
set C, X
add A, [fd_root_offset]
jsr fd_write_sector
add X, 0x200
sub A, [fd_root_offset]
set B, A
jsr fd_get_FAT_entry
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop

set X, pop
set I, pop
set C, pop
set B, pop
set A, pop
set pc, pop

:fd_get_free_file_table_entry	;0xFFFF if none
set push, I
set A, [fd_file_table]
set I, 0x0
:.loop
ife [A], 0x0
	set pc, .end
add A, 0x13
add I, 0x1
ifn I, 0x10
	set pc, .loop
set A, 0xFFFF
set I, pop
set pc, pop
:.end
set I, pop
set pc, pop

:fd_open_file ; Open file A for reading and writing.
set push, X
set X, A
jsr fd_get_free_file_table_entry
ifn A, 0xFFFF
	set pc, .continue
set X, pop
set pc, pop
:.continue
set push, B
set push, C
set B, A
set push, B
sub peek, [fd_file_table]
div peek, 0x13
set A, X
;add loading of the DTE
add B, 0x10
set [B], [current_process]
add B, 0x1
set A, 0x200
jsr mm_request_memory
set [B], A
set A, pop
set C, pop
set B, pop
set X, pop
set pc, pop

:fd_assign		;copies C words from A to B
ife C, 0x0
	set pc, pop
set push, I
set push, J
set push, C
set I, B
set J, A
:.loop
sti [I], [J]
sub C, 0x1
ifn C, 0x0
	set pc, .loop
set C, pop
set J, pop
set I, pop
set pc, pop

:fd_clear		;sets C words starting from A to 0x0
ife C, 0x0
	set pc, pop
set push, I
set push, J
set push, C
set I, A
:.loop
sti [I], 0x0
sub C, 0x1
ifn C, 0x0
	set pc, .loop
set C, pop
set J, pop
set I, pop
set pc, pop

:fd_compare	;compare C words in A to C words in B; 0x0 if equal, 0xFFFF if not
ife C, 0x0
	set pc, pop
set push, B
set push, C
:.loop
ifn [A], [B]
	set pc, .wrong
add A, 0x1
add B, 0x1
sub C, 0x1
ifn C, 0x0
	set pc, .loop
set A, 0x0
set C, pop
set B, pop
set pc, pop
:.wrong
set A, 0xFFFF
set C, pop
set B, pop
set pc, pop

:fd_close_file ; Close file A.
set push, A
set push, B
set push, C
mul A, 0x13
add A, [fd_file_table]
add A, 0x11
set B, A
set A, [B]
ifn A, 0x0
	jsr mm_free_memory
sub B, 0x11
set A, B
set C, 0x13
jsr fd_clear
set C, pop
set B, pop
set A, pop
set pc, pop


;by Lukew4lker
:fd_find_file_dte ; (not tested) 
; input
; a- starting address of file name string (11 chars)
; b - Cluster dir sector number if null use current processes wd
; output
; a - offset of file dte in sector b(output is a cluster number)
set push, i 
set push, j
set push, y
set push, c
set push, x
set push, a
set a, 0x200
jsr [mm_request_memory]
ife a, 0xffff
   set pc, .error0001
set c, a; a isn't being used anymore
ife b, 0x0
set pc, .usewd
set a, b
add a, [fd_root_offset]; translates useable sector numbers into actual drive sector numbers
:.endusewd ;by this point, A should point to the sector to be loaded
jsr [fd_load_sector]
ife a, 0xffff ;incase fd_load_sector ever gives errors
    set pc, .error0001
set b, a; sector number is now stored in b
set a, pop ; a points to filename location
set x, 0x0
set i, a
set j, c
set y, 0x1
set push, a
add a, 6

:.loop
ife i, a  
set pc, .foundfile
ifn [i],[j]
set pc, .looknextdte
ife i, a
   ife y, 0x20
      set pc, .load_next_sector_of_dir
sti pc, .loop

:.looknextdte
set i, peek
add j, 0x11
And [j + 6], 0xff00
add y, 1
set pc, .loop

:.usewd
set a, 0xffff
jsr fd_get_wd
add a, [fd_root_offset]; translates cluster numbers into actual drive sector numbers
set pc, .endusewd

:.load_next_sector_of_dir
set push, a
sub j, 0x200;put memory pointer back to start
sub b, [fd_root_offset]; translate back to cluster number
set a, b
jsr [fd_get_FAT_entry]
ife a, 0xffff
    set pc, .eod
add b, [fd_root_offset];translate to drive sector numbers
set b, a
jsr [fd_load_sector]
ife a, 0xffff ;incase fd_load_sector ever gives errors
    set pc, .error0002
set a, pop
set x, 0x0
set pc, .loop

:.error0001
set a, pop
set x, pop
set c, pop
set y, pop
set j, pop
set i, pop
set ex, 0x0fff

:.error0002
set a, pop ;destroys backup working directory, the original is in a :/
set a, 0xffff
set x, pop
set c, pop
set y, pop
set j, pop
set i, pop
set pc, pop

:.eod;(file not found in directory)
set ex, pop ; destroys backup working directory, the original is in a :/
set ex, 0x404
set a, 0xffff
set x, pop
set c, pop
set y, pop
set j, pop
set i, pop
set pc, pop

:.foundfile
set a, pop
set a, c 
set x, pop
set c, pop
set y, pop
set j, pop
set i, pop
set pc, pop

:fd_get_wd 
; input a - prog id if 0xffff then use current program
; output a - the wd cluster number
set push, b
set b, fd_working_dirs
Ife a, 0xffff
   add b, [current_process]
add b, a 
set a, [b]
set b, pop
set pc, pop

:fd_list
; Input 
; a, cluster number of directory you are listing. 
; b, number of times you have called the program, set to 0 if none before calling.
; c, memory location for 192 words.
; Output 
; a - 
; b - number of times you have called this program (adds one to input of b)
; c - error if any
set push, z
set push, j
set push, i
set push, x
set push, y
set push, c
set push, a
set a, 0x220
jsr mm_request_memory ; a points to memory location for extracting data from drive... NO LOSE ET.
ife a, 0xffff
sub pc, 1
set c, a
set a, peek; original a
add a, [fd_root_offset]
																	;set a, pop; put the memory location that fd_load_sector writes to, in the stack 
jsr fd_load_sector
ife a, 0xffff
   sub pc, 1;commit seppuku here.
set y, 1

:.move_filenames
; move (32) dte filenames (located in i) into strings (strings still have 0 pads (deal with it)) that are to be put in j
set x, pop; pop original A input, is supposed to not do anything
set push, c; for freeing the memory latef
set z, peek;original c input
set push, x ; put a back in stack
set x, 0

:.loop_2
set i, c ;memory written to by drive
set j, z ;z = original c input
:.loop_1
ifg y, 0x20; the trasnfer has occured 32 times
	set pc, .end 
ife x, 5;exit with write frame i pointing to ext high byte word
	set pc, .handlehbext
add x, 1 ;counts number of writes
set [j], [i]
sti pc, .loop_1

:.handlehbext
set [j], [i]
and j, 0xff00
add c, 0x11; the dtes are 17 words long
add z, 7
add y, 1
set x, 0
set pc, .loop_2

:.end ; tranfer complete 
set c, pop; for freeing memory later
set a, pop
set c, pop
set y, pop
set x, pop
set i, pop
set j, pop
set z, pop
set pc, pop

:fd_find_sector ; Find sector B in file A.	;Find and load, I assume?
:fd_apply ; Apply changes to file A. Do this before loading another sector in the file.
:fd_discard ; Discard changes to file A. Will reload the current sector from disk.
:fd_create ; Create file, dir or link A with flags B.
:fd_delete ; Delete file, dir or link A.
:fd_move ; Move file, dir or link A.
:fd_change_dir ; Change the working directory to A, one level at a time.
:fd_get_flags ; Get the flags for file A.
:fd_set_flags ; Set the flags for file A to B. Some flag changes will be reverted before applying.
:fd_get_props ; Get the properties (size, number of children, flags, create, edit and view times).	;How should I get the number of children??
:fd_format ; Format disk A with the filesystem.
